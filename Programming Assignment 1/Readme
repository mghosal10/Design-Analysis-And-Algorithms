Selection Sort

A ) We will implement the simple selection sort algorithm. You can use an array to store the elements. As you are aware the selection sort algorithm runs in O(n2) time. Implement your algorithm in a separate function called SelectionSort().
Sample Test Cases
Input: 4 6 8 15 20 22 10 3 9 2 
Output: 2 3 4 6 8 9 10 15 20 22 

B ) In the second part of the assignment you will modify the selection sort algorithm to obtain the first k smallest elements of the array in sorted order (the value of k will be entered by the user). Your algorithm must run in O(nk) time. 
Sample Test Cases
Input: 4 6 8 15 20 22 10 3 9 2 
K = 4
Output: 2 3 4 6 

C ) Use the implementation in part 2 to determine the median value of the input array. You can assume that the values in the array are distinct. If the array is of even size, then the median is the average of the two middle values is the array.

NOTE: There is no code for preprocessing the input. Any extra spaces before the input or commas in between array elements will make the code fail.

Instructions to execute Part A
Compile - javac Selection_Sort.java
Run - java Selection_Sort

Instructions to execute Part B and C
Compile - javac K_smallest_elements.java
Run - java K_smallest_elements
